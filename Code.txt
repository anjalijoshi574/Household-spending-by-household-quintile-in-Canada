
# Load required libraries
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
library(patchwork)


# Load the data
data <- read.csv('C:/Users/anjal/Desktop/Data mining/11100223-eng/11100223.csv')

# View data
View(data)

# Remove unnecessary columns
data <- data %>% select(-UOM, -UOM_ID, -SCALAR_FACTOR, -SCALAR_ID, -VECTOR, -COORDINATE, -STATUS, -SYMBOL, -TERMINATED, -DECIMALS)

# Change column names in snake_case
colnames(data) <- c("ref_date", "geo", "dguid", "statistic", "income_quintile", "expense_category", "value")

# Total number of distinct expense_category in the data
n_distinct(data$expense_category)

# Remove unnecessary expense categories
# Identify expense categories with missing values for any year
categories_with_na <- data %>%
  group_by(expense_category) %>%
  filter(any(is.na(value))) %>%
  pull(expense_category) %>%
  unique()

# Filter out these categories from the original dataset
data <- data %>%
  filter(!expense_category %in% categories_with_na)

# Total number of distinct expense_category in the data after filtering
n_distinct(data$expense_category)

# Check number of missing values per column
colSums(is.na(data))

# Check duplicate rows
nrow(data[duplicated(data), ])

# Filter 'All quintile' to keep the mean values for expense_category
data <- data %>% filter(income_quintile == 'All quintiles')

# Convert certain columns to factors
data$geo <- as.factor(data$geo)
data$statistic <- as.factor(data$statistic)
data$income_quintile <- as.factor(data$income_quintile)
data$expense_category <- as.factor(data$expense_category)

# Check the structure and summary of the data
str(data)
summary(data)

# Summarize average expenditure by category
total_data_summary <- data %>%
    group_by(`expense_category`) %>%
    summarize(
        Average_Expenditure = mean(value, na.rm = TRUE),
        Total_Expenditure = sum(value, na.rm = TRUE)
    ) %>%
    arrange(desc(Total_Expenditure))
 
# View the summary
View(total_data_summary)

# Summarize expenditures by category and year
data_summary <- data %>%
    group_by(ref_date, `expense_category`) %>%
    summarize(Total_Expenditure = sum(value, na.rm = TRUE)) %>%
    ungroup()

# View the summary
View(data_summary)

# Find the highest and lowest expenditure category for each year
highest_expenditure <- data_summary %>%
    group_by(ref_date) %>%
    slice_max(Total_Expenditure, n = 1) %>%
    ungroup()

lowest_expenditure <- data_summary %>%
    group_by(ref_date) %>%
    slice_min(Total_Expenditure, n = 1) %>%
    ungroup()

# View results
highest_expenditure
lowest_expenditure

# Exclude "Total expenditure", and "Total current consumption"
filtered_data <- data %>%
    filter(
        !(`expense_category` %in% 
              c("Total expenditure", "Total current consumption"))
    )
  
# Group by year and category to summarize total expenditure
data_summary <- filtered_data %>%
     group_by(ref_date, `expense_category`) %>%
     summarize(Total_Expenditure = sum(value, na.rm = TRUE)) %>%
     ungroup()
 
# Find the highest expenditure category for each year
highest_expenditure <- data_summary %>%
     group_by(ref_date) %>%
     slice_max(Total_Expenditure, n = 1) %>%
    ungroup()
 
# Find the lowest expenditure category for each year
lowest_expenditure <- data_summary %>%
     group_by(ref_date) %>%
     slice_min(Total_Expenditure, n = 1) %>%
     ungroup()

# View results
highest_expenditure
lowest_expenditure

# Create a line plot for Shelter expenditure by year
ggplot(highest_expenditure, aes(x = ref_date, y = Total_Expenditure)) +
    geom_line(color = "black", linewidth = 1) +
    geom_point(color = "black", size = 2.5) +
    labs(title = "Annual Expenditure on Shelter",
         x = "Year",
         y = "Expenditure on Shelter") +
    scale_x_continuous(breaks = seq(2010, 2021, 1)) + 
    theme_minimal()

# Filter the data for total expenditure and provinces
total_expenditure_data <- data %>%
    filter(expense_category == "Total expenditure" & 
           geo %in% c("Alberta", "British Columbia", "Manitoba", "New Brunswick", 
                      "Nova Scotia", "Newfoundland and Labrador", "Prince Edward Island", 
                      "Ontario", "Quebec", "Saskatchewan")) %>%
    select(ref_date, geo, value, expense_category)

# Summarize total expenditure by year and province
yearly_expenditure <- total_expenditure_data %>%
    group_by(ref_date, geo) %>%
    summarise(total_value = sum(value, na.rm = TRUE)) %>%
    ungroup()

# Define the list of provinces and create empty lists to store forecasts and plots
provinces <- unique(yearly_expenditure$geo)
forecasts <- list()
plots <- list() 

# Loop through each province to create time series, fit ARIMA model, and plot
for (province in provinces) {
    # Filter data for the current province and arrange by year
    province_data <- yearly_expenditure %>%
        filter(geo == province) %>%
        arrange(ref_date)
    
    # Create a zoo time series object for irregular years
    ts_data <- zoo(province_data$total_value, order.by = province_data$ref_date)
    
    # Fit the ARIMA model
    fit <- auto.arima(ts_data)
    
    # Forecast the next 3 time points (corresponding to 2022, 2024, etc.)
    forecast_data <- forecast(fit, h = 3)
    
    # Convert forecast, actual and fit data to data frames for plotting
    actual_df <- data.frame(Year = index(ts_data), Expenditure = coredata(ts_data), Series = "Actual")
    forecast_df <- data.frame(Year = time(forecast_data$mean), Forecast = forecast_data$mean, Series = "Forecast")
    fit_df <- data.frame(Year = index(fitted(fit)), Fit = as.numeric(fitted(fit)), Series = "Fit")
    
    # Remove NA values from forecast and fit data for plotting
    forecast_df <- na.omit(forecast_df)
    fit_df <- na.omit(fit_df)

    # Extract 80% confidence intervals from forecast data
    ci_80 <- data.frame(
        Year = time(forecast_data$mean),
        Lower_80 = forecast_data$lower[,1],  # 80% lower bound
        Upper_80 = forecast_data$upper[,1]   # 80% upper bound
    )

    # Plot title
    plot_title <- paste("Actual vs Forecast for", province)
    

    # Plot using ggplot2
    p <- ggplot() +
        # Actual data
        geom_line(data = actual_df, aes(x = Year, y = Expenditure, color = Series), size = 1) +
        geom_point(data = actual_df, aes(x = Year, y = Expenditure, color = Series), size = 2) +
        
        # Forecast data
        geom_line(data = forecast_df, aes(x = Year, y = Forecast, color = Series), size = 1, linetype = "dashed") +
        geom_point(data = forecast_df, aes(x = Year, y = Forecast, color = Series), size = 2) +
        
        # Fitted data
        geom_line(data = fit_df, aes(x = Year, y = Fit, color = Series), size = 1, linetype = "dashed") +
        geom_point(data = fit_df, aes(x = Year, y = Fit, color = Series), size = 2) +
        
        # Confidence interval as shaded ribbon
        geom_ribbon(data = ci_80, aes(x = Year, ymin = Lower_80, ymax = Upper_80), fill = "blue", alpha = 0.2) +
        
        # Labels and theme
        labs(title = plot_title, x = "Year", y = "Expenditure") +
        scale_color_manual(values = c("Actual" = "black", "Forecast" = "blue", "Fit" = "red")) +
        theme_minimal() +
        scale_x_continuous(breaks = seq(2010, max(forecast_df$Year), by = 2)) +
        scale_y_continuous(labels = scales::comma)
    
    # Store the plot in the list
    plots[[province]] <- p

    # Print summary of the forecast for each province
    cat(paste("Forecast for", province, ":\n"))
    print(summary(forecast_data))
}

# Arrange plots in a 2x2 grid with a common legend
(plots[[1]] | plots[[2]]) / (plots[[3]] | plots[[4]]) +
 plot_layout(guides = 'collect') & theme(legend.position = "bottom")

(plots[[5]] | plots[[6]]) / (plots[[7]] | plots[[8]]) +
 plot_layout(guides = 'collect') & theme(legend.position = "bottom")

(plots[[9]]) / (plots[[10]]) +
 plot_layout(guides = 'collect') & theme(legend.position = "bottom")


# Trend analysis of total expenditure of each province
total_expenditure_data <- data %>%
     filter(`expense_category` == "Total expenditure" & 
                geo %in% c("Alberta", "British Columbia", "Manitoba", "New Brunswick", 
                           "Nova Scotia", "Newfoundland and Labrador", "Prince Edward Island", 
                           "Ontario", "Quebec", "Saskatchewan")) %>% group_by(geo, ref_date) %>%
          summarize(Total_Expenditure = sum(value, na.rm = TRUE)) %>%
          ungroup()

# Plot the trend of total expenditure for each province
ggplot(total_expenditure_data, aes(x = ref_date, y = Total_Expenditure, color = geo, group = geo)) +
    geom_line(linewidth = 1) +
    geom_point(size = 2) +
    labs(
        title = "Trend of Total Expenditure by Province",
        x = "Year",
        y = "Total Expenditure",
        color = "Province"
    ) +
    theme_minimal() +
    theme(
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
    )

